from telethon.tl import types

from .. import loader, utils
from telethon.tl.types import TypeChannelParticipantsFilter, ChannelParticipantsAdmins


class WelcomeMod(loader.Module):
    """–ù–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ Leave/AFK —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GroupHelpBot"""
    strings = {'name': 'AutoWarn'}

    async def client_ready(self, client, db):
        self.db = db

    async def wcmd(self, message):
        """.state –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ —Å—É–¥–Ω–æ–π –Ω–æ—á–∏(–≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–≤–∞—Ä–Ω –∫–æ—Ä–æ—á–µ)"""
        state = self.db.get("AutoWarn", "ids", [])

        if message.chat_id not in state:
            state.append(message.chat_id)
            self.db.set("AutoWarn", "ids", state)
            await message.respond("<b>–ù–∞–∫–∞–∑–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!</b>")
            await message.delete()
            return
        state.remove(message.chat_id)
        self.db.set("AutoWarn", "ids", state)
        await message.respond("<b>–ù–∞–∫–∞–∑–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!</b>")
        await message.delete()
        return

async def watcher(self, message):
    """–ø–æ—á–µ–º—É —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è watcher???"""
    if message.sender_id not in [5424831786, 1044037207, 1050428643, 761250017, 468253535, 1520369962]:
        return

    # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
    afk_phrases = ['–°–µ–≥–æ–¥–Ω—è –±—ã–ª –∂–µ—Å—Ç–æ–∫–æ —É–±–∏—Ç', '–ì–æ–≤–æ—Ä—è—Ç, —É –Ω–µ–≥–æ –≤ –≥–æ—Å—Ç—è—Ö –±—ã–ª üí§ –°–æ–Ω']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
    if any(phrase in message.raw_text for phrase in afk_phrases):
        for usr in message.entities:
            if hasattr(usr, 'user_id'):
                uid = usr.user_id
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–¥–∞—á–µ–π –º—É—Ç–∞
                await message.respond(f"!mute {str(uid)} 45m AFK(–±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã)")
                return

  # –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—Å–ª–æ–≤–∏—è
  suicide_phrases = ['ü™¶', '–Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≥–Ω–µ—Ç—É—â–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–≤–µ—Å–∏–ª—Å—è.']

# –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —É—Å–ª–æ–≤–∏—è
suicide_phrases = ['ü™¶', '–Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≥–Ω–µ—Ç—É—â–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–≤–µ—Å–∏–ª—Å—è.']

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
if any(phrase in message.raw_text.split() for phrase in suicide_phrases):
    msgs = []
    x = await message.client.get_messages(message.chat_id, 15)
    for msg in x:
        msgs.append(msg.raw_text)

    if msgs.count(message.raw_text) > 1:
        pass
    else:
        for usr in message.entities:
            if hasattr(usr, 'user_id'):
                uid = usr.user_id
                # –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –æ —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–µ
                warn_text = (
                    f"!warn {str(uid)}\n"
                    "–ª–∏–≤ –∏–∑ –∏–≥—Ä—ã/—á–∞—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã"
                )
                await message.respond(warn_text)


